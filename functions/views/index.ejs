<%- include("reusables/nav") %>

<!-- Filtros superiores -->
<div class="container mx-auto px-4 py-4">
  <div class="flex flex-wrap items-center gap-4">
    <!-- Filtro de fuente -->
    <div class="flex items-center">
      <label for="sourceFilter" class="mr-2 text-sm font-medium">Fuente:</label>
      <select id="sourceFilter" class="border rounded-md px-3 py-1.5 text-sm">
        <option value="all" <%= selectedSource === 'all' ? 'selected' : '' %>>Todos</option>
        <option value="genz" <%= selectedSource === 'genz' ? 'selected' : '' %>>Gen Z</option>
        <option value="users" <%= selectedSource === 'users' ? 'selected' : '' %>>Usuarios</option>
      </select>
    </div>
    
    <!-- Filtro de ordenamiento -->
    <div class="flex items-center">
      <label for="sortFilter" class="mr-2 text-sm font-medium">Ordenar por:</label>
      <select id="sortFilter" class="border rounded-md px-3 py-1.5 text-sm">
        <option value="default" <%= selectedSort === 'default' ? 'selected' : '' %>>Destacados</option>
        <option value="price_asc" <%= selectedSort === 'price_asc' ? 'selected' : '' %>>Precio: Menor a mayor</option>
        <option value="price_desc" <%= selectedSort === 'price_desc' ? 'selected' : '' %>>Precio: Mayor a menor</option>
        <option value="newest" <%= selectedSort === 'newest' ? 'selected' : '' %>>Más recientes</option>
        <option value="random" <%= selectedSort === 'random' ? 'selected' : '' %>>Aleatorio</option>
      </select>
    </div>
    
    <!-- Botón de aplicar filtros -->
    <button id="applyFilters" class="bg-red-600 hover:bg-red-700 text-white px-4 py-1.5 rounded-md text-sm transition-colors">
      Aplicar filtros
    </button>
  </div>
</div>

<!-- Contenedor principal de productos -->
<section class="py-8 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-2xl font-bold animated-text" data-duration="500" data-stagger-delay="50">
        <% if (selectedSource === 'genz') { %>
          Productos Gen Z
        <% } else if (selectedSource === 'users') { %>
          Productos de Usuarios
        <% } else { %>
          Todos los Productos
        <% } %>
      </h2>
    </div>
    
    <% if (paginatedProducts.length === 0) { %>
      <div class="bg-white rounded-lg shadow-sm p-12 text-center">
        <div class="mb-4 text-gray-400">
          <i class="fas fa-search fa-3x"></i>
        </div>
        <h3 class="text-xl font-semibold mb-2">No se encontraron productos</h3>
        <p class="text-gray-500 mb-6">Intenta con otra categoría o elimina los filtros aplicados.</p>
        <a href="/" class="inline-flex items-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors">
          Ver todos los productos
        </a>
      </div>
    <% } else { %>
      <div id="productGrid" class="grid grid-cols-2 md:grid-cols-6 gap-4 animated-container">
        <% paginatedProducts.forEach(product => {
          // Etiquetas
          const badges = getBadges(product);
          // Descuento
          const discountedPrice = product.discount ? (product.price * (1 - product.discount / 100)).toFixed(2) : product.price.toFixed(2);
          // Estrellas
          const stars = Array.isArray(product.stars) ? product.stars : [];
          const totalVotes = stars.reduce((acc, val) => acc + val, 0);
          const weightedSum = stars.reduce((acc, val, index) => acc + val * (index + 1), 0);
          const rating = totalVotes > 0 ? (weightedSum / totalVotes) : 0;
        %>
          <div class="bg-white overflow-hidden rounded-lg shadow-sm hover:shadow-md transition-all hover:border hover:border-1 flex flex-col h-full group relative animated-card" data-hover-effect="tilt" data-enter-animation="fade" data-price="<%= discountedPrice %>" data-created-at="<%= product.createdAt?.toMillis?.() || '' %>">
            <!-- Product Image -->
            <div class="relative aspect-square overflow-hidden bg-gray-100">
              <a href="/product/<%= product.id %>">
                <img 
                  src="<%= product.image %>" 
                  alt="<%= product.name %>" 
                  class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                  loading="lazy"
                >
              </a>
              
              <!-- Discount badge -->
              <% if (product.discount) { %>
                <div class="absolute top-0 left-0 bg-red-600 text-white text-xs font-bold px-2 py-1">
                  -<%= product.discount %>%
                </div>
              <% } %>
              
              <!-- Add to cart button -->
              <button onclick="addToCart('<%= product.id %>')" class="absolute bottom-2 right-2 w-10 h-10 bg-white rounded-full shadow-md flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                <i class="fas fa-shopping-cart text-gray-700"></i>
              </button>
            </div>
            
            <!-- Product Info -->
            <div class="p-3 flex-grow">
              <!-- Etiquetas -->
              <% if (badges.length > 0) { %>
                <div class="flex flex-wrap gap-1 mb-1">
                  <% badges.forEach(badge => { %>
                    <span class="text-xs px-1.5 py-0.5 rounded <%= badge.class %>"><%= badge.type %></span>
                  <% }); %>
                </div>
              <% } %>
              
              <!-- Product Title -->
              <h3 class="text-sm leading-tight mb-2 line-clamp-2 animated-text" data-duration="100" data-stagger-delay="20">
                <a href="/product/<%= product.id %>" class="hover:text-red-600"><%= product.name %></a>
              </h3>
              
              <!-- Pricing -->
              <div class="flex items-center">
                <span class="text-red-600 font-bold"><small>PEN </small><span class="animated-counter product-price" data-start="0" data-end="<%= discountedPrice %>" data-duration="2000" data-format="currency">0</span></span>
                <% if (product.discount) { %>
                  <span class="animated-counter ml-2 text-xs text-gray-500 line-through" data-start="0" data-end="<%= product.price %>" data-duration="2000" data-format="currency">0</span>
                <% } %>
              </div>
              
              <!-- Shipping & Rating -->
              <div class="mt-2 flex items-center text-xs text-gray-500">
                <div class="flex items-center">
                  <i class="fas fa-star text-yellow-400"></i>
                  <span class="ml-1"><%= rating.toFixed(1) %></span>
                </div>
                <span class="mx-2">|</span>
                <span>+&hairsp; </span><span class="animated-counter" data-start="0" data-end="<%= product.sold || 0 %>" data-duration="2000" data-format="integer">0</span><span>&hairsp; vendidos</span>
              </div>
              
              <!-- Free Shipping Badge -->
              <% if (product.freeShipping) { %>
                <span class="text-xs text-green-700">
                  Envío Gratis Disponible
                </span>
              <% } %>
            </div>
          </div>
        <% }); %>
      </div>
    <% } %>
  </div>
</section>

<style>
  /* Estilos para animación de contenedor */
  .animated-container {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .animated-container.loading {
    opacity: 0.6;
    pointer-events: none;
  }
  
  /* Animación para las tarjetas de productos */
  .animated-card-entrance {
    animation: cardEntrance 0.4s ease forwards;
    opacity: 0;
  }
  
  @keyframes cardEntrance {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Etiquetas de tipos de ofertas */
  .group:hover {
    z-index: 10;
    transform: translateY(-2px);
  }
  
  /* Badge styles */
  .badge-choice {
    border: 1px solid #e0e0e0;
    background-color: white;
    color: #333;
  }
  
  .badge-superoferta {
    background-color: #ff4747;
    color: white;
  }
  
  .badge-promo {
    background-color: #ff4747;
    color: white;
  }
  
  .badge-bigsave {
    background-color: #2e8ae6;
    color: white;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Animar las tarjetas de productos iniciales
    animateProductCards();
    
    // Configurar filtros
    document.getElementById('applyFilters').addEventListener('click', function() {
      applyFilters();
    });
    
    // También aplicar filtros al cambiar los selectores (opcional)
    document.getElementById('sourceFilter').addEventListener('change', function() {
      applyFilters();
    });
    
    document.getElementById('sortFilter').addEventListener('change', function() {
      applyFilters();
    });
  });
  
  function animateProductCards() {
    const productCards = document.querySelectorAll('.animated-card');
    
    productCards.forEach((card, index) => {
      card.classList.remove('animated-card-entrance');
      // Forzar un reflow
      void card.offsetWidth;
      card.style.animationDelay = `${index * 0.05}s`;
      card.classList.add('animated-card-entrance');
    });
  }
  
  function applyFilters() {
    // Mostrar efecto de carga
    const productGrid = document.getElementById('productGrid');
    if (productGrid) {
      productGrid.classList.add('loading');
    }
    
    // Obtener valores de filtros
    const source = document.getElementById('sourceFilter').value;
    const sort = document.getElementById('sortFilter').value;
    
    // Construir URL con parámetros
    const url = new URL(window.location.href);
    url.searchParams.set('source', source);
    url.searchParams.set('sort', sort);
    
    // Mantener otros parámetros existentes como la categoría
    const category = new URLSearchParams(window.location.search).get('category');
    if (category) {
      url.searchParams.set('category', category);
    }
    
    // Navegar a la URL con los filtros aplicados
    window.location.href = url.toString();
  }
  
  function addToCart(productId) {
      // Mostrar indicador de carga (opcional)
      const addButton = event.currentTarget;
      const originalContent = addButton.innerHTML;
      addButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
      addButton.disabled = true;
      
      fetch('/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          productId, 
          quantity: 1 // Puedes modificar esto para permitir cantidades variables
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Error en la respuesta del servidor');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          // Actualizar contador del carrito en la interfaz
          const cartCountElements = document.querySelectorAll('.cart-count');
          cartCountElements.forEach(el => {
            el.textContent = data.cartCount;
          });
          
          // Mostrar notificación de éxito
          showNotification('Producto agregado al carrito', 'success');
          
          // Opcional: Mostrar mini-carrito o animación
          animateCartIcon();
        } else {
          showNotification(data.message || 'Error al agregar el producto', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showNotification('Error al agregar el producto al carrito', 'error');
      })
      .finally(() => {
        // Restaurar el botón
        addButton.innerHTML = originalContent;
        addButton.disabled = false;
      });
    }

    // Función para mostrar notificaciones
    function showNotification(message, type = 'success') {
      // Crear elemento de notificación
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.innerHTML = `
        <div class="notification-content">
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
          <span>${message}</span>
        </div>
      `;
      
      // Agregar al DOM
      document.body.appendChild(notification);
      
      // Mostrar con animación
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Eliminar después de un tiempo
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      }, 3000);
    }

    // Función para animar el icono del carrito
    function animateCartIcon() {
      const cartIcon = document.querySelector('.cart-icon');
      if (cartIcon) {
        cartIcon.classList.add('cart-bounce');
        setTimeout(() => {
          cartIcon.classList.remove('cart-bounce');
        }, 1000);
      }
    }
</script>

<%- include('reusables/footer') %>